/* universal selector, selects all elements on page */

* {
    /* removes margins and padding from all elements like headers and paragraphs*/
    margin: 0;
    padding: 0;
    /* changes box model so borders and padding are not added to total width or heigh specified for that box*/
    box-sizing: border-box;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

.header {
    /* This box should be 95% of viewport */
    height: 95vh;
    /* gradient, comma, then image */
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(hero.jpg);
    /* takes up full width of viewport */
    background-size: cover;
    /* top of image will always stay at top of screen when resizing */
    background-position: top;
    /* clip-path changes shape of image by adjusting 4 corners using x y values */
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    /* must set to relative so you can position logo as absolute */
    position: relative;
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    /* size of logo, width scales automatically */
    height: 3.5rem;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
    /* Hack: Fixes final shake of animation bug in CSS */
    backface-visibility: hidden;
    margin-bottom: 6rem;
}

.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* Set the animation name and duration */
    animation-name: moveInLeft;
    animation-duration: 1s;
    /* How animation should progress over time */
    animation-timing-function: ease-out;
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /* Animation Shorthand */
    /* animation: moveInRight 1s ease-out; */
}

.header__text-box {
    /* to center */
    position: absolute;
    /* the top and left value position from the parent element, so they are not visually centered*/
    top: 40%;
    left: 50%;
    /* this centers the element visually by adjusting 50% of the element, not the parent*/
    transform: translate(-50%, -50%);
    text-align: center;
}


/* keyframes used to animate header text movement */


/* Create steps in time */

@keyframes moveInLeft {
    /* Start */
    0% {
        opacity: 0;
        /* Animates in X plane */
        transform: translateX(-10rem);
    }
    /* 80% of animate time */
    /* 1rem moves further to the right */
    80% {
        transform: translateX(1rem);
    }
    /* End of animation */
    100% {
        opacity: 1;
        /* 0 is its normal position */
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    80% {
        transform: translateX(-1rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(3rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn,

/* btn pseduo classes */

.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /* Animate all properties */
    transition: all .2s;
    /* the btn::after position:absolute property looks for this relative reference */
    position: relative;
    /* font-size: 1.6rem; */
    /* border: none; */
    /* cursor: pointer; */
}

.btn:hover {
    /* Move up */
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}


/* After the button is hovered away from */

.btn:hover::after {
    /* Increase element scale */
    transform: scaleX(1.4) scaleY(1.6);
    /* Fade out to invisible */
    opacity: 0;
}

.btn:active,
.btn:focus {
    outline: none;
    /* Moves down 1px from INITIAL STATE (not hovered state) when clicked */
    transform: translateY(-1px);
    /* Decrease shaow when clicked */
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
    background-color: #fff;
    color: #777;
}

.btn--white::after {
    background-color: #fff;
}


/*
.btn--green {
background-color: #55c57a;
color: #fff;
}

.btn--green::after {
background-color: #55c57a;
}
*/


/* Make it appear same as original button */

.btn::after {
    /* Must specify content property so it apperas */
    content: "";
    /* Must display property for it to display */
    display: inline-block;
    /* 100% of width of the button since ::after acts like a child property */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* Put it behind button */
    position: absolute;
    /* This location reference is the first element with a relative position it can find */
    top: 0;
    left: 0;
    /* Defines position of layered elements. -1 puts it behind */
    z-index: -1;
    /* Set transition from original state */
    transition: all .4s;
}


/* Animate a button */

.btn--animated {
    /* Move up from below. .75s is a delay */
    animation: moveInBottom .5s ease-out .75s;
    /* Applies keyframes 0% styles before animation starts. Otherwise you'd see the element before it animates */
    animation-fill-mode: backwards;
}


/*
.btn-text:link, .btn-text:visited {
font-size: 1.6rem;
color: #55c57a;
display: inline-block;
text-decoration: none;
border-bottom: 1px solid #55c57a;
padding: 3px;
transition: all .2s;
}

.btn-text:hover {
background-color: #55c57a;
color: #fff;
box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
transform: translateY(-2px);
}

.btn-text:active {
box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
transform: translateY(0);
}
*/